UART는 시리얼 통신을 가능하게 해주는 장치이자 기술
Serial.begin(9600); <- 9600은 **시리얼 통신의 전송 속도 (baud rate)**를 의미. 역사적으로 널리 쓰인 표준 속도
Serial.print()는 줄바꿈 X, Serial.println()은 줄 끝에 \n을 추가(줄바꿈 O)
setup과 loop 함수가 실제로 사용되는 과정
ex) #include <Arduino.h>
    
    int main(void)                                  <- Arduino에서는 이 main() 함수가 일반적으로 숨겨져 있지만, 내부적으로는 이 구조를 기반으로 실행됨
    {
        init();                                     <- 보드 및 내부 주변장치 초기화 함수(타이머 설정, 핀 기본 설정, 아날로그/디지털 기능 초기화)
    #if defined(USBCON)                             ┐ 
        USBDevice.attach();                         │                      
    #endif                                          ┘ <- USB 디바이스 기능을 활성화. 대부분의 ESP8266이나 Uno에서는 해당되지 않으며 이 코드는 무시
        setup();                                    <- 사용자가 작성한 setup() 함수 호출

        for( ; ; ){                                 <- 조건 없는 무한 루프 (while(true)와 동일)
            loop();                                 <- 사용자가 작성한 loop() 함수를 반복적으로 호출
            if (serialEventRun) serialEventRun();   <- serialEventRun()은 사용자가 정의한 serialEvent() 함수들을 자동으로 실행해주는 비동기 이벤트 처리 함수. 보통은 잘 사용되지 않지만, 시리얼 통신 이벤트를 자동으로 처리하고 싶을 때 유용
        }

        return 0;                                   <- for(;;) 무한 루프 구조이므로 이 줄까지 도달하지 않음
    }
VCC : + / DATA : out / GND : -